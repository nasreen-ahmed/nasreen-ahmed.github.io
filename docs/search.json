[
  {
    "objectID": "posts/beta-distribution/index.html",
    "href": "posts/beta-distribution/index.html",
    "title": "Beta Distribution",
    "section": "",
    "text": "The Beta Distribution is a family of continuous probability distribution defined on the interval \\([0,1]\\) in terms of two positive parameters , denoted by \\(\\alpha\\) and \\(\\beta\\), that appear as exponents of the variable and its complement to 1,respectively, and control the shape of the distribution.\n\n\nThe probability density function(PDF) of the beta distribution, for \\(0 \\leq x\\) or $ 0 &lt;x &lt;1$, and shape parameters \\(\\alpha ,\\beta &gt;0\\), is a power function of the variable \\(x\\) and of its reflection \\((1-x)\\) as follows :\n\\[\n\\begin{align*}\nf(x;\\alpha,\\beta) &= \\text{constant } \\cdot x^{\\alpha-1} (1-x)^{\\beta-1}\\\\\n&= \\frac{x^{\\alpha-1}(1-x)^{\\beta -1}}{\\int_0^1 u^{\\alpha-1}(1-u)^{\\beta-1}du} \\\\\n&=\\frac{\\gamma(\\alpha+\\beta)}{\\gamma(\\alpha)\\gamma(\\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\\\\\n&= \\frac{1}{B(\\alpha,\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1}\n\\end{align*}\n\\tag{1}\\]\nwhere \\(\\gamma(z)\\), is the gamma function. The beta function,\\(B\\), is a normalizing constant to ensure that the total probability is \\(1\\). In the above equation, \\(x\\) is a realization - an observed value that actually occured - of a random variable.\n\nTheorem 1 (Pythagoras) This is theorem\n\nProof.\nIn Theorem 1, we had seen that\n\nProposition 1 (My prop)  \n\nProof.\n\nimport numpy as np\n\nprint(\"Hello\")\n\nHello"
  },
  {
    "objectID": "posts/beta-distribution/index.html#probability-density-function",
    "href": "posts/beta-distribution/index.html#probability-density-function",
    "title": "Beta Distribution",
    "section": "",
    "text": "The probability density function(PDF) of the beta distribution, for \\(0 \\leq x\\) or $ 0 &lt;x &lt;1$, and shape parameters \\(\\alpha ,\\beta &gt;0\\), is a power function of the variable \\(x\\) and of its reflection \\((1-x)\\) as follows :\n\\[\n\\begin{align*}\nf(x;\\alpha,\\beta) &= \\text{constant } \\cdot x^{\\alpha-1} (1-x)^{\\beta-1}\\\\\n&= \\frac{x^{\\alpha-1}(1-x)^{\\beta -1}}{\\int_0^1 u^{\\alpha-1}(1-u)^{\\beta-1}du} \\\\\n&=\\frac{\\gamma(\\alpha+\\beta)}{\\gamma(\\alpha)\\gamma(\\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\\\\\n&= \\frac{1}{B(\\alpha,\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1}\n\\end{align*}\n\\tag{1}\\]\nwhere \\(\\gamma(z)\\), is the gamma function. The beta function,\\(B\\), is a normalizing constant to ensure that the total probability is \\(1\\). In the above equation, \\(x\\) is a realization - an observed value that actually occured - of a random variable.\n\nTheorem 1 (Pythagoras) This is theorem\n\nProof.\nIn Theorem 1, we had seen that\n\nProposition 1 (My prop)  \n\nProof.\n\nimport numpy as np\n\nprint(\"Hello\")\n\nHello"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nasreen-ahmed.github.io",
    "section": "",
    "text": "Hi there! Welcome to my blog. I’m Nasreen. I am a software engineer turned data-scientist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeta Distribution\n\n\n\n\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\nJan 26, 2025\n\n\nNasreen\n\n\n\n\n\n\n\n\n\n\n\n\n3D plotting in matplotlib\n\n\n\n\n\n\nCoding\n\n\n\n\n\n\n\n\n\nJan 26, 2025\n\n\nNasreen\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/python-plotting/index.html",
    "href": "posts/python-plotting/index.html",
    "title": "3D plotting in matplotlib",
    "section": "",
    "text": "source : https://www.youtube.com/watch?v=fAztJg9oi7s\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#Single Points\n\nax = plt.axes(projection =\"3d\")\nax.scatter(3,5,10)\nplt.show()\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.random.randint(0,100,(500,))\ny_data = np.random.randint(0,100,(500,))\nz_data = np.random.randint(0,100,(500,))\n\nax.scatter(x_data,y_data,z_data)\nplt.show()\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\nz_data =  x_data * y_data \n\nax.plot(x_data,y_data,z_data)\nplt.show()\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nx_data = np.arange(-5,5,0.1)\n#z_data =  np.sin(x_data) * np.cos(y_data) \nprint(\"sin\",np.sin(x_data[0:10]),\"\\n\")\nx_axis = range(len(x_data))\nsin_x = np.sin(x_data)\ncos_x = np.cos(x_data)\nplt.plot(x_axis,x_data)\nplt.plot(x_axis,sin_x,label='sin x')\nplt.plot(x_axis,cos_x,label='scos x')\nplt.legend()\nplt.show()\n\nsin [0.95892427 0.98245261 0.99616461 0.99992326 0.993691   0.97753012\n 0.95160207 0.91616594 0.87157577 0.81827711]\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\nz_data =  np.sin(x_data) * np.cos(y_data) \n\nax.plot(x_data,y_data,z_data)\nax.set_title(\"Funny Function\")\nax.set_xlabel(\"My x values (cm)\")\nax.set_ylabel(\"My y values (cm)\")\nax.set_zlabel(\"My fancy results\")\nplt.show()"
  },
  {
    "objectID": "posts/python-plotting/index.html#surface-plots",
    "href": "posts/python-plotting/index.html#surface-plots",
    "title": "3D plotting in matplotlib",
    "section": "Surface Plots",
    "text": "Surface Plots\n\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\n\nX, Y = np.meshgrid(x_data,y_data) \nZ = X * Y\nax.plot_surface(X,Y,Z)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(-5,5,0.1)\ny_data =  np.arange(-5,5,0.1)\n\nX, Y = np.meshgrid(x_data,y_data) \nZ = np.sin(X) * np.cos(Y)\nax.plot_surface(X,Y,Z,cmap='plasma')\nplt.show()\n\n\n\n\n\n\n\n\nBeta Distribution\nBeta distribution pdf function\n\\[\n\\begin{align*}\nf(x;\\alpha,\\beta) &= \\text{constant } \\cdot x^{\\alpha-1} (1-x)^{\\beta-1}\\\\\n&= \\frac{x^{\\alpha-1}(1-x)^{\\beta -1}}{\\int_0^1 u^{\\alpha-1}(1-u)^{\\beta-1}du} \\\\\n&=\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\\\\\n&= \\frac{1}{B(\\alpha,\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1}\n\\end{align*}\n\\tag{1}\\]\n\\(\\Gamma(n)=(n-1)!\\)\n\nimport math \n\nx = np.arange(0,1,0.05)\n#alpha = np.arange(0.5,9,2)\n#beta =  np.arange(0.5,8,2)\n\nalpha = 4\nbeta = 2\n\nbeta_op = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op.append(val)\n\nalpha = 2\nbeta = 4\n\nbeta_op_2 = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op_2.append(val)\n\nalpha = 5\nbeta = 5\n\nbeta_op_3 = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op_3.append(val)\n\nprint(\"max value of the PDF when alpha = 4 and beta = 2\",max(beta_op))\nprint(\"max value of the PDF when alpha = 2 and beta = 4\",max(beta_op_2))\nprint(\"max value of the PDF when alpha = 4 and beta = 2\",max(beta_op_3))\nplt.plot(x,beta_op,label =\"alpha=4,beta=2\")\nplt.plot(x,beta_op_2,label =\"alpha=2,beta=4\")\nplt.plot(x,beta_op_3,label =\"alpha=5,beta=5\")\nplt.legend()\nplt.show()\n\nmax value of the PDF when alpha = 4 and beta = 2 0.0052734375\nmax value of the PDF when alpha = 2 and beta = 4 0.0052734375\nmax value of the PDF when alpha = 4 and beta = 2 6.200396825396825e-06"
  }
]