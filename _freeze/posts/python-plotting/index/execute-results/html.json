{
  "hash": "6672f81af9b6300f27f0978a56ca4bd6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"3D plotting in matplotlib\"\nauthor: \"Nasreen\"\ndate: \"2025-01-26\"\ncategories: [Coding]      \n# image: \"image.jpg\"\ntoc: true\ntoc-depth: 3\njupyter: python3\nexecute: \n  enabled: true\n---\n\n\nsource : https://www.youtube.com/watch?v=fAztJg9oi7s\n\n::: {#84c638e1 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#Single Points\n\nax = plt.axes(projection =\"3d\")\nax.scatter(3,5,10)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=411 height=396}\n:::\n:::\n\n\n::: {#36a1b66e .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.random.randint(0,100,(500,))\ny_data = np.random.randint(0,100,(500,))\nz_data = np.random.randint(0,100,(500,))\n\nax.scatter(x_data,y_data,z_data)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=410 height=397}\n:::\n:::\n\n\n::: {#57602022 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\nz_data =  x_data * y_data \n\nax.plot(x_data,y_data,z_data)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=414 height=396}\n:::\n:::\n\n\n::: {#185c4e32 .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nx_data = np.arange(-5,5,0.1)\n#z_data =  np.sin(x_data) * np.cos(y_data) \nprint(\"sin\",np.sin(x_data[0:10]),\"\\n\")\nx_axis = range(len(x_data))\nsin_x = np.sin(x_data)\ncos_x = np.cos(x_data)\nplt.plot(x_axis,x_data)\nplt.plot(x_axis,sin_x,label='sin x')\nplt.plot(x_axis,cos_x,label='scos x')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsin [0.95892427 0.98245261 0.99616461 0.99992326 0.993691   0.97753012\n 0.95160207 0.91616594 0.87157577 0.81827711] \n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {#ad528257 .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\nz_data =  np.sin(x_data) * np.cos(y_data) \n\nax.plot(x_data,y_data,z_data)\nax.set_title(\"Funny Function\")\nax.set_xlabel(\"My x values (cm)\")\nax.set_ylabel(\"My y values (cm)\")\nax.set_zlabel(\"My fancy results\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=408 height=416}\n:::\n:::\n\n\n## Surface Plots \n\n::: {#760ac2dd .cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(0,50,0.1)\ny_data =  np.arange(0,50,0.1)\n\nX, Y = np.meshgrid(x_data,y_data) \nZ = X * Y\nax.plot_surface(X,Y,Z)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=414 height=396}\n:::\n:::\n\n\n::: {#982a3103 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom mpl_toolkits import mplot3d\n\n#scatter plots \n\nax = plt.axes(projection =\"3d\")\nx_data = np.arange(-5,5,0.1)\ny_data =  np.arange(-5,5,0.1)\n\nX, Y = np.meshgrid(x_data,y_data) \nZ = np.sin(X) * np.cos(Y)\nax.plot_surface(X,Y,Z,cmap='plasma')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=413 height=390}\n:::\n:::\n\n\nBeta Distribution \n\nBeta distribution pdf function \n\n$$\n\\begin{align*}\nf(x;\\alpha,\\beta) &= \\text{constant } \\cdot x^{\\alpha-1} (1-x)^{\\beta-1}\\\\\n&= \\frac{x^{\\alpha-1}(1-x)^{\\beta -1}}{\\int_0^1 u^{\\alpha-1}(1-u)^{\\beta-1}du} \\\\\n&=\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\\\\\n&= \\frac{1}{B(\\alpha,\\beta)}x^{\\alpha-1}(1-x)^{\\beta-1}\n\\end{align*}\n$$ {#eq-pdf_beta}\n\n$\\Gamma(n)=(n-1)!$\n\n::: {#c271e203 .cell execution_count=8}\n``` {.python .cell-code}\nimport math \n\nx = np.arange(0,1,0.05)\n#alpha = np.arange(0.5,9,2)\n#beta =  np.arange(0.5,8,2)\n\nalpha = 4\nbeta = 2\n\nbeta_op = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op.append(val)\n\nalpha = 2\nbeta = 4\n\nbeta_op_2 = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op_2.append(val)\n\nalpha = 5\nbeta = 5\n\nbeta_op_3 = []\nfor i in range(0,len(x)):\n\n    val = (math.factorial(alpha-1)*math.factorial(beta-1))/(math.factorial(alpha+beta-1)) * x[i]**(alpha-1)* (1-x[i])**(beta-1)\n    beta_op_3.append(val)\n\nprint(\"max value of the PDF when alpha = 4 and beta = 2\",max(beta_op))\nprint(\"max value of the PDF when alpha = 2 and beta = 4\",max(beta_op_2))\nprint(\"max value of the PDF when alpha = 4 and beta = 2\",max(beta_op_3))\nplt.plot(x,beta_op,label =\"alpha=4,beta=2\")\nplt.plot(x,beta_op_2,label =\"alpha=2,beta=4\")\nplt.plot(x,beta_op_3,label =\"alpha=5,beta=5\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmax value of the PDF when alpha = 4 and beta = 2 0.0052734375\nmax value of the PDF when alpha = 2 and beta = 4 0.0052734375\nmax value of the PDF when alpha = 4 and beta = 2 6.200396825396825e-06\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=587 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}